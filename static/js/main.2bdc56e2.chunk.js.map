{"version":3,"sources":["containers/Countries/CountryContainer.module.css","components/CountryDetails/CountryDetails.module.css","components/Navigation/Navigation.module.css","components/Footer/Footer.module.css","components/CountryDetails/CountryDetails.js","components/MapContainer/MapContainer.js","components/MoreCountryDetails/MoreCountryDetails.js","containers/Countries/CountryContainer.js","components/Navigation/Navigation.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","countryDetails","props","className","styles","CardContainer","onClick","showCountryDetails","country","style","borderRight","src","flag","alt","name","length","slice","population","region","subregion","capital","array","languages","forEach","element","replace","getLanguages","currencies","mapStyles","width","height","MapContainer","google","this","zoom","initialCenter","lat","lng","position","Component","GoogleApiWrapper","apiKey","moreCountryDetails","parseData","toString","boxShadow","paddingTop","CountryDetails","data","padding","callingCodes","latlng","timezones","regionalBlocs","Object","values","join","obj","objectEntries","entries","parseObject","translations","borders","altSpellings","topLevelDomain","area","minHeight","CountryContainer","state","countries","value","countryResult","numberOfCountries","countryRegion","inputHandler","event","countrySearchResult","filter","toLowerCase","includes","target","map","index","key","getCountryDetails","setState","clearInput","console","log","africanCountriesHandler","countryName","africanCountries","europeanCountriesHandler","europeanCountries","americasCountriesHandler","americasCountries","asiaCountriesHandler","asianCountries","Axios","get","then","response","window","scrollTo","color","fontWeight","top","right","border","display","justifyContent","alignItems","flexDirection","paddingBottom","CountryRegions","inputcontainer","field","placeholder","required","onChange","onBlur","flexWrap","PureComponent","Navigation","navbar","href","footer","App","Footer","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bdc56e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"CountryContainer_field__3frby\",\"CountryRegions\":\"CountryContainer_CountryRegions__1ueQN\",\"field__input\":\"CountryContainer_field__input__3oJKz\",\"a-field\":\"CountryContainer_a-field__2c5Kv\",\"a-field__input\":\"CountryContainer_a-field__input__3_lhr\",\"a-field__label-wrap\":\"CountryContainer_a-field__label-wrap__20u4F\",\"a-field__label\":\"CountryContainer_a-field__label__1SebR\",\"a-field_a1\":\"CountryContainer_a-field_a1__O7Pzk\",\"a-field_a2\":\"CountryContainer_a-field_a2__2-QuN\",\"a-field_a3\":\"CountryContainer_a-field_a3__2Flpf\",\"inputcontainer\":\"CountryContainer_inputcontainer__3MXZv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardContainer\":\"CountryDetails_CardContainer__2I1ij\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navigation_navbar__1Vxt7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__2ID0n\"};","import React from \"react\"\r\nimport styles from \"./CountryDetails.module.css\"\r\n\r\n\r\nconst countryDetails = (props) => {\r\n    \r\n    function shortenName (name){\r\n       if(name.length > 25){\r\n           return name.slice(0, 20) + \"...\"\r\n       }else{\r\n           return name\r\n       }\r\n\r\n    }\r\n    function getLanguages(array){\r\n        let languages = \"\";\r\n        array.forEach(element => {\r\n            languages += element.name + \",\"\r\n        })\r\n        return languages.replace(/,\\s*$/, \"\");\r\n    }\r\n\r\n    function getCurrency(array){\r\n        let languages = \"\";\r\n        array.forEach(element => {\r\n            languages += `Name:${element.name}, Code:${element.code}, Symbol:${element.symbol}  `\r\n        })\r\n        return languages.replace(/,\\s*$/, \"\");\r\n    }\r\n\r\n    return (\r\n            <div className={`${styles.CardContainer} card mb-3`} onClick={() => props.showCountryDetails(props.country)} >\r\n              <div className=\"row no-gutters\">\r\n                <div className=\"col-md-4\" style={{borderRight:\"1px solid #ccc\"}}>\r\n                  <img src={props.country.flag} className=\"card-img\" alt=\"country-flag\"/>\r\n                </div>\r\n                <div className=\"col-md-8\">\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{shortenName(props.country.name)}</h5>\r\n                    <p>\r\n                        <small><strong>Population</strong>: {props.country.population}</small><br/>\r\n                        <small><strong>Region</strong>: {props.country.region}</small><br/>\r\n                        <small><strong>Sub-region</strong>: {props.country.subregion}</small><br/>\r\n                        <small><strong>Capital</strong>: {props.country.capital}</small><br/>\r\n                        <small><strong>Langugages</strong>: {getLanguages(props.country.languages)}</small><br/>\r\n                        <small><strong>Currency</strong>: {props.country.currencies[0].name}</small>\r\n\r\n\r\n                  </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>  \r\n    )\r\n}\r\n\r\nexport default countryDetails;","import React,{Component} from \"react\"\r\nimport { Map, GoogleApiWrapper, Marker  } from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n    width: '100%',\r\n    height: '100%',\r\n  };\r\nclass MapContainer extends Component {\r\n\r\n    render(){\r\n        return (\r\n        <Map\r\n          google={this.props.google}\r\n          zoom={8}\r\n          style={mapStyles}\r\n          initialCenter={{ lat: this.props.lat, lng: this.props.lng}}\r\n        >\r\n            <Marker position={{ lat: this.props.lat, lng: this.props.lng}} />\r\n        </Map>\r\n        )\r\n    }\r\n}\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyDBUOAf-TRFXcQkDLaGk4kiQZ7ZJSyJzJc'\r\n  })(MapContainer);","import React from \"react\"\r\nimport CountryDetails from \"../CountryDetails/CountryDetails\"\r\nimport MapContainer from \"../MapContainer/MapContainer\"\r\n\r\n\r\n\r\nconst moreCountryDetails = (props) => {\r\n\r\n    function parseData (array){\r\n        let languages = \"\";\r\n        if(array.length){ \r\n        array.forEach(element => {\r\n            languages += element.toString() + \",\"\r\n        })\r\n        return languages.replace(/,\\s*$/, \"\");\r\n        }else{\r\n            return \"None available\"\r\n        }\r\n    }\r\n\r\n    function test () {\r\n\r\n    }\r\n\r\n    function parseObject (obj) {\r\n        let objectEntries = ''\r\n       if(Object.values(obj).length){\r\n            Object.entries(obj).forEach(element => {\r\n                objectEntries += element[0] + \": \" + + \"\" + element[1] + \", \"\r\n        })\r\n        return objectEntries.replace(/,\\s*$/, \"\");\r\n       }else{\r\n           return \"None available\"\r\n       }\r\n       \r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 \" style={{boxShadow:\" 0px 2px 3px #ccc\",paddingTop:\"5px\"}}>\r\n                    <CountryDetails country={props.data } showCountryDetails={test}/>\r\n                </div>\r\n                <div className=\"col-md-6\" style={{boxShadow:\" 0px 2px 3px #ccc\",paddingTop:'10px'}}>\r\n                    <p style={{boxShadow:\"0px 2px 3px\",padding:\"20px\"}}>\r\n                        <small><strong>Calling Codes: </strong>{parseData(props.data.callingCodes)}</small><br />\r\n                        <small><strong>Latlng: </strong>{parseData(props.data.latlng)}</small><br />\r\n                        <small><strong>Timezone: </strong>{parseData(props.data.timezones)}</small><br />\r\n                        <small><strong>Regionalblocs: </strong>{ props.data.regionalBlocs.length ? \r\n                        Object.values(props.data.regionalBlocs[0]).join(\", \").replace(/,\\s*$/, \"\") : \"None available\"}</small><br />\r\n                        <small><strong>Translations: </strong>{parseObject(props.data.translations)}</small><br />\r\n                        <small><strong>Borders: </strong>{parseData(props.data.borders)}</small><br />\r\n                        <small><strong>AltSpelling: </strong>{parseData(props.data.altSpellings)}</small><br />\r\n                        <small><strong>Translations: </strong>{parseData(props.data.altSpellings)}</small><br />\r\n                        <small><strong>TopLevelDomain: </strong>{parseData(props.data.topLevelDomain)}</small><br />\r\n                        <small><strong>Area: </strong>{`${props.data.area}km`}</small>\r\n\r\n\r\n\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-12 pt-2 pl-2 pr-2\" style={{minHeight:\"500px\"}}>\r\n                    <MapContainer lat={ props.data.latlng.length ? props.data.latlng[0] : 0} lng={props.data.latlng.length ? props.data.latlng[1]: 0}/>\r\n                </div>\r\n            </div>\r\n    </div>\r\n    )\r\n}\r\nexport default moreCountryDetails","import React,{PureComponent} from \"react\"\r\nimport Axios from \"axios\"\r\nimport CountryDetails from \"../../components/CountryDetails/CountryDetails\"\r\nimport MoreCountryDetail from \"../../components/MoreCountryDetails/MoreCountryDetails\"\r\nimport styles from \"./CountryContainer.module.css\"\r\n\r\n\r\n\r\nclass CountryContainer extends PureComponent {\r\n    state = {\r\n        countries:[],\r\n        value:'',\r\n        countryResult:[],\r\n        countryDetails: null,\r\n        numberOfCountries:null,\r\n        countryRegion: null\r\n    } \r\n    componentDidMount (){\r\n        Axios.get(\"https://restcountries.eu/rest/v2/all\").then(response => {\r\n            this.setState({countries:response.data})\r\n        })\r\n    }\r\n    componentDidUpdate() {\r\n        window.scrollTo(0, 0)\r\n      }\r\n\r\n    inputHandler = (event) => {\r\n            const countrySearchResult = this.state.countries.filter(country => {\r\n                return country.name.toLowerCase().includes(event.target.value.toLowerCase())\r\n        })\r\n        .map((element,index) => {\r\n            return <CountryDetails key={index} country={element} showCountryDetails= {this.getCountryDetails}/>\r\n        })\r\n        this.setState({\r\n            countryResult:countrySearchResult,\r\n             countryDetails:null,\r\n             value:event.target.value,\r\n             numberOfCountries:null\r\n            })\r\n    }\r\n\r\n    clearInput = () => {\r\n        this.setState({value: ''})\r\n    }\r\n    getCountryDetails = (data) => {\r\n        this.setState({\r\n            countryDetails:data,numberOfCountries:null\r\n        })\r\n        console.log(data)\r\n    }\r\n    \r\n    africanCountriesHandler = () => {\r\n        let countryName = null\r\n        const africanCountries = this.state.countries.filter((country) =>{\r\n            return country.region.toLowerCase() === \"africa\" || \r\n            country.subregion.toLowerCase() === \"western africa\" ||\r\n            country.subregion.toLowerCase() === \"northern africa\" ||\r\n            country.subregion.toLowerCase() === \"southern africa\" ||\r\n            country.subregion.toLowerCase() === \"eastern africa\"\r\n        })\r\n        .map((element,index) => {\r\n            countryName = element.region\r\n             return <CountryDetails \r\n                        key={index} \r\n                        country={element} \r\n                        showCountryDetails={this.getCountryDetails}\r\n                    />\r\n        })\r\n        this.setState({\r\n            countryResult:africanCountries,\r\n             countryDetails:null,\r\n              numberOfCountries:africanCountries.length,\r\n               countryRegion:countryName\r\n            })\r\n            \r\n    }\r\n\r\n    europeanCountriesHandler = () => {\r\n        let countryName = null\r\n        const europeanCountries = this.state.countries.filter((country) =>{\r\n            return country.region.toLowerCase() === \"europe\" || \r\n            country.subregion.toLowerCase() === \"western europe\" ||\r\n            country.subregion.toLowerCase() === \"northern europe\" ||\r\n            country.subregion.toLowerCase() === \"southern europe\" ||\r\n            country.subregion.toLowerCase() === \"eastern europe\"\r\n        })\r\n        .map((element,index) => {\r\n            countryName = element.region\r\n            return <CountryDetails \r\n                        key={index} \r\n                        country={element}\r\n                        showCountryDetails= {this.getCountryDetails}\r\n                    />\r\n        })\r\n        this.setState({\r\n            countryResult:europeanCountries, \r\n            countryDetails:null,\r\n            numberOfCountries:europeanCountries.length,\r\n            countryRegion:countryName\r\n        })\r\n    }\r\n\r\n    americasCountriesHandler = () => {\r\n        let countryName = null\r\n        const americasCountries = this.state.countries.filter((country) =>{\r\n            return country.region.toLowerCase() === \"americas\" || \r\n            country.subregion.toLowerCase() === \"western america\" ||\r\n            country.subregion.toLowerCase() === \"north america\" ||\r\n            country.subregion.toLowerCase() === \"south america\" ||\r\n            country.subregion.toLowerCase() === \"central america\"\r\n        })\r\n        .map((element,index) => {\r\n            countryName = element.region\r\n            return <CountryDetails \r\n                    key={index} \r\n                    country={element} \r\n                    showCountryDetails={this.getCountryDetails}\r\n                    />\r\n        })\r\n        this.setState({\r\n            countryResult:americasCountries,\r\n             countryDetails:null,\r\n             numberOfCountries:americasCountries.length,\r\n             countryRegion:countryName\r\n            })\r\n    }\r\n\r\n    asiaCountriesHandler = () => {\r\n        let countryName = null\r\n        const asianCountries = this.state.countries.filter((country) =>{\r\n            return country.region.toLowerCase() === \"asia\" || \r\n            country.subregion.toLowerCase() === \"western asia\" ||\r\n            country.subregion.toLowerCase() === \"northern asia\" ||\r\n            country.subregion.toLowerCase() === \"southern asia\" ||\r\n            country.subregion.toLowerCase() === \"eastern asia\"\r\n        })\r\n        .map((element,index) => {\r\n            countryName = element.region\r\n            return <CountryDetails key={index} country={element} showCountryDetails= {this.getCountryDetails}/>\r\n        })\r\n        this.setState({\r\n            countryResult:asianCountries,\r\n             countryDetails:null, \r\n             numberOfCountries:asianCountries.length,\r\n             countryRegion:countryName\r\n            })\r\n    }\r\n    \r\n\r\n    render () {\r\n        console.log(this.state.numberOfCountries)\r\n        \r\n        return (\r\n            <div style={{paddingTop:\"100px\", position:\"relative\"}}>\r\n                {this.state.numberOfCountries ? \r\n                <span style={{position:\"absolute\", color:\"purple\",padding:\"8px\",fontWeight:\"500\",top:\"10px\", right:\"20px\",border:\"2px solid #ccc\"}}>Total Countries in {this.state.countryRegion}: {this.state.numberOfCountries}</span>:\r\n                 null\r\n                 }\r\n                <main style={{display:\"flex\",justifyContent:'center', alignItems:\"center\", flexDirection:\"column\"}}>\r\n                    <div style={{display:\"flex\", justifyContent:\"center\", alignItems:\"center\", paddingBottom:\"10px\",position:\"relative\"}} >\r\n                        \r\n                      <ul className={`list-group list-group-horizontal-lg ${styles.CountryRegions}`} >\r\n                        <li className=\"list-group-item \" onClick={this.asiaCountriesHandler}>Asia</li>\r\n                        <li className=\"list-group-item\" onClick={this.europeanCountriesHandler}>Europe</li>\r\n                        <li className=\"list-group-item\" onClick={this.americasCountriesHandler}>Americas</li>\r\n                        <li className=\"list-group-item\" onClick={this.africanCountriesHandler}>Africa</li>\r\n\r\n                      </ul>\r\n                      \r\n                  </div>\r\n                <div className={styles.inputcontainer}>\r\n                    <label className={[styles.field, styles[\"a-field\"], styles[\"a-field_a1\"]].join(\" \")}>\r\n                        <input \r\n                            className={[styles[\"field__input\"], styles[\"a-field__input\"]].join(\" \")} \r\n                            placeholder=\"e.g. Japan\" required \r\n                            value={this.state.value} \r\n                            onChange={this.inputHandler}\r\n                            onBlur={this.clearInput}\r\n                        />\r\n                        <span className={styles['a-field__label-wrap']}>\r\n                        <span className={`${styles[\"a-field__label\"]} text-muted`}>Search for countries </span>\r\n                        </span>\r\n                    </label>   \r\n                </div>\r\n                \r\n                </main>\r\n                <div style={{display:\"flex\", justifyContent:\"center\", alignItems:\"center\", flexDirection:\"row\",flexWrap:\"wrap\", padding:\" 10px 10px 4rem 10px\"}}>\r\n                    {!this.state.countryDetails ? this.state.countryResult: <MoreCountryDetail data={this.state.countryDetails}/>}\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n export default CountryContainer","import React from \"react\"\r\nimport styles from \"./Navigation.module.css\"\r\n\r\nconst Navigation = (props) => {\r\n\r\n    return (\r\n        <div className={styles.navbar}>\r\n            <a href=\"#home\">World Countries</a>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation","import React from \"react\"\r\nimport styles from \"./Footer.module.css\"\r\n\r\nconst footer= (props) => {\r\n\r\n    return (\r\n        <div className={styles.footer}>\r\n            <p className=\"text-muted\"> &copy;Copyright Chukwuemeka Okeke 2019</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default footer","import React,{Fragment} from 'react';\nimport './App.css';\nimport CountryContainer from \"./containers/Countries/CountryContainer\"\nimport Navigation from \"./components/Navigation/Navigation\"\nimport Footer from \"./components/Footer/Footer\"\n\n\n\nfunction App() {\n  return (\n    <Fragment>\n    <Navigation />\n    <div className=\"ContentWrapper\">\n      <CountryContainer />\n    </div>\n    <Footer />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}